# distutils: language = c++
# cython: embedsignature = True

from libc.stdint cimport (uint8_t, uint16_t, uint32_t, uint64_t, int8_t,
                          int16_t, int32_t, int64_t)
from cythrust.thrust.device_vector cimport device_vector
from cythrust.thrust.reduce cimport accumulate_by_key
from cythrust.thrust.iterator.constant_iterator cimport make_constant_iterator

{% for ctype, dtype in DEVICE_VECTOR_TYPES -%}
from cythrust.device_vector cimport DeviceVectorView{{ dtype[3:].title() }}
{% endfor %}


{% for ctype, dtype in INTEGRAL_DEVICE_VECTOR_TYPES %}
cpdef count_{{ dtype[3:] }}_key(DeviceVectorView{{ dtype[3:].title() }} keys,
                                DeviceVectorView{{ dtype[3:].title() }} reduced_keys,
                                DeviceVectorViewInt32 reduced_values):
    cdef size_t count = (<device_vector[{{ ctype }}].iterator>accumulate_by_key(
        keys._vector.begin(), keys._vector.begin() + <size_t>keys.size,
        make_constant_iterator(1), reduced_keys._vector.begin(),
        reduced_values._vector.begin()).first - reduced_keys._vector.begin())
    return count
{% endfor %}
