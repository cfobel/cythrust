# distutils: language = c++
# cython: embedsignature = True

from libc.stdint cimport (uint8_t, uint16_t, uint32_t, uint64_t, int8_t,
                          int16_t, int32_t, int64_t)
from cythrust.thrust.device_vector cimport device_vector
from cythrust.thrust.functional cimport plus, minus
from cythrust.thrust.transform cimport transform2
from cythrust.thrust.reduce cimport accumulate_by_key
from cythrust.thrust.iterator.permutation_iterator cimport \
    make_permutation_iterator

{% for ctype, dtype in DEVICE_VECTOR_TYPES -%}
from cythrust.device_vector cimport DeviceVector{{ dtype[3:].title() }}
{% endfor %}


{% for key_ctype, key_dtype in INTEGRAL_DEVICE_VECTOR_TYPES %}
    {% for value_ctype, value_dtype in COMMON_DEVICE_VECTOR_TYPES %}
cpdef sum_{{ value_dtype[3:] }}_by_{{ key_dtype[3:] }}_key(DeviceVector{{ key_dtype[3:].title() }} keys, DeviceVector{{ value_dtype[3:].title() }} values,
                            DeviceVector{{ key_dtype[3:].title() }} reduced_keys,
                            DeviceVector{{ value_dtype[3:].title() }} reduced_values):
    cdef size_t count = (<device_vector[{{ key_ctype }}].iterator>accumulate_by_key(
        keys._vector.begin(), keys._vector.begin() + <size_t>keys.size,
        values._vector.begin(), reduced_keys._vector.begin(),
        reduced_values._vector.begin()).first - reduced_keys._vector.begin())
    return count
    {% endfor %}
{% endfor %}


{% for a_ctype, a_dtype in COMMON_DEVICE_VECTOR_TYPES %}
    {% for b_ctype, b_dtype in COMMON_DEVICE_VECTOR_TYPES %}
cpdef sum_{{ a_dtype[3:] }}_{{ b_dtype[3:] }}(DeviceVector{{ a_dtype[3:].title() }} a,
                                              DeviceVector{{ b_dtype[3:].title() }} b,
                                              DeviceVector{{ a_dtype[3:].title() }} output):
    cdef plus[{{ a_ctype }}] plus_f

    transform2(a._vector.begin(), a._vector.end(), b._vector.begin(),
               output._vector.begin(), plus_f)
    {% endfor %}
{% endfor %}


{% for a_ctype, a_dtype in INTEGRAL_DEVICE_VECTOR_TYPES %}
    {% for b_ctype, b_dtype in DEVICE_VECTOR_TYPES %}
cpdef sub_{{ a_dtype[3:] }}_{{ b_dtype[3:] }}(DeviceVector{{ a_dtype[3:].title() }} a,
                                              DeviceVector{{ b_dtype[3:].title() }} b,
                                              DeviceVector{{ a_dtype[3:].title() }} output):
    cdef minus[{{ a_ctype }}] minus_f

    transform2(a._vector.begin(), a._vector.end(), b._vector.begin(),
               output._vector.begin(), minus_f)
    {% endfor %}
{% endfor %}


{% for a_ctype, a_dtype in COMMON_DEVICE_VECTOR_TYPES %}
    {% for b_ctype, b_dtype in COMMON_DEVICE_VECTOR_TYPES %}
cpdef sum_{{ a_dtype[3:] }}_{{ b_dtype[3:] }}_stencil(
        DeviceVectorInt32 stencil,
        DeviceVector{{ a_dtype[3:].title() }} a,
        DeviceVector{{ b_dtype[3:].title() }} b,
        DeviceVector{{ a_dtype[3:].title() }} output):
    cdef plus[{{ a_ctype }}] plus_f

    transform2(
        make_permutation_iterator(a._vector.begin(), stencil._vector.begin()),
        make_permutation_iterator(a._vector.begin(), stencil._vector.end()),
        make_permutation_iterator(b._vector.begin(), stencil._vector.begin()),
        make_permutation_iterator(output._vector.begin(),
                                  stencil._vector.begin()), plus_f)
    {% endfor %}
{% endfor %}


{% for a_ctype, a_dtype in COMMON_DEVICE_VECTOR_TYPES %}
    {% for b_ctype, b_dtype in COMMON_DEVICE_VECTOR_TYPES %}
cpdef sum_n_{{ a_dtype[3:] }}_{{ b_dtype[3:] }}_stencil(
        size_t N,
        DeviceVectorInt32 stencil,
        DeviceVector{{ a_dtype[3:].title() }} a,
        DeviceVector{{ b_dtype[3:].title() }} b,
        DeviceVector{{ a_dtype[3:].title() }} output):
    cdef plus[{{ a_ctype }}] plus_f

    transform2(
        make_permutation_iterator(a._vector.begin(), stencil._vector.begin()),
        make_permutation_iterator(a._vector.begin(),
                                  stencil._vector.begin() + N),
        make_permutation_iterator(b._vector.begin(), stencil._vector.begin()),
        make_permutation_iterator(output._vector.begin(),
                                  stencil._vector.begin()), plus_f)
    {% endfor %}
{% endfor %}
